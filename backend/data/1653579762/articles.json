[
  {
    "id": "onRrHnJveAIAV4SHHd4hA",
    "slug": "build-desktop-apps-with-the-power-of-angular",
    "title": "Build Desktop apps with the power of Angular",
    "content": "> If you can build a website, you can build a desktop app.\n\nThat’s true if you know how to write Javascript code, you can build a desktop application that looks and behaves like the native one. not just that, but you can also bring the power of Angular into the world of desktop apps to make your IU look stunning \uD83D\uDE0D.\n\nEnough talking, go get yourself a cup of coffee and let’s get started.\n\n# What are we going to do?!!\n\nWe’re going to build a basic desktop application using [Electron](https://electronjs.org/) and [Angular](https://angular.io/).\n\n> Before we start I expect that you have some basic knowledge of NodeJs and Angular.\n\n# Set up Angular\n\nIf you don’t have Angular cli installed already, run the following command to install it.\n\n\n```bash\n$ npm install -g @angular/cli\n```\n\nNow let’s start a new Angular application.\n\n\n```bash\n$ ng new angular-electron\n```\n\nIt’ll ask you about the styles compiler you want to use and if you want to use the Angular router and so on, this configuration doesn’t matter at all select whatever you want.\n\nYou can see your application now in action by running…\n\n```bash\n$ cd angular-electron\n$ ng serve\n```\n\nThen open your browser at [http://localhost:4200/](http://localhost:4200/), anyway that’s not the funniest part, let’s move forward.\n\nWe need to modify the index.html file at the src folder of our project, and add a period to the base tag, so our app can find the static files, don’t skip this step it’s very important.\n\n```html\n<base href=\"./\">\n```\n\n# Set up Electron\n\nNow we going to add Electron to our application.\n\n```bash\n$ npm install --save-dev electron\n```\n\nAnd we’ll also need some dependencies.\n\n```bash\n$ npm install --save-dev app-root-path\n```\n\nNow let’s create a new folder for our Electron application.\n\n```bash\n$ mkdir bin && cd bin && touch main.ts\n```\n\nAs you can see we created a bin folder with a `main.ts` file in it, and the reason we created the main file with the `ts` extension and not `js` is that we already using Typescript for the Angular application, so why not use Typescript for the entire project?!!\n\nNow let’s add some code to our `main.ts` file (finally we're writing some code \uD83D\uDE05)\n\n```ts\nimport { app, BrowserWindow } from 'electron';\nimport { resolve } from 'app-root-path';\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet win: BrowserWindow;\n\nfunction createWindow () {\n  // Create the browser window.\n  win = new BrowserWindow({\n    width: 800,\n    height: 600\n  });\n\n  // Load the angular app.\n  // Make sure that this path targets the index.html of the\n  // angular application (the distribution).\n  win.loadFile(resolve('dist/angular-electron/index.html'));\n\n  // Emitted when the window is closed.\n  win.on('closed', () => {\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi-windows, this is the time\n    // when you should delete the corresponding element.\n    win = null;\n  });\n}\n\n// This method will be called when the Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow);\n\n// Quit when all windows are closed.\napp.on('window-all-closed', () => {\n  // On macOS it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  // On macOS, it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (win === null) {\n    createWindow();\n  }\n});\n\n// In this file, you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n```\n\nThe code above is exactly the same as mentioned at the [official website](https://electronjs.org/docs/tutorial/first-app) but in Typescript syntax, also note that the `win.loadFile` function linking to the entry file of the Angular application “we didn’t build it yet”.\n\nOkay, we need to check if what we are doing is even working, right?\n\nLet’s add a script to our `package.json` file so we can build and run our app.\n\n```json\n\"main\" : \"bin/main.js\",\n\"scripts\": {\n   \"electron\": \"tsc bin/main.ts && ng build && electron bin/main.js\"\n}\n```\n\nAnd now let’s see it in action.\n\n```bash\n$ npm run electron\n```\n\nFor now, you should see the application up and running with the angular logo in it, so far so good \uD83D\uDE09.\n\nOkay, now we have our application running, but who could we use the Electron API within the Angular application itself?!!\n\nDon’t panic it’s as easy as running…\n\n```bash\n$ npm install --save-dev ngx-electron\n```\n\n# Accessing Electron API from within the Angular application.\n\nWe just installed [ngx-electron](https://github.com/ThorstenHans/ngx-electron) which going to make our life a lot easier, so let’s see how to use it.\n\nWe need to import this module like any other module we used to use with Angular inside the `app.module.ts` file.\n\n```ts\nimport { NgxElectronModule } from 'ngx-electron';\n@NgModule({\nimports: [\n  // rest of your modules...\n  NgxElectronModule\n]\n})\nexport class AppModule {}\n```\n\nNow we can use it in our components like this\n\n```ts\nimport { ElectronService } from 'ngx-electron';\nexport class AppComponent {\n   constructor(private _electronService: ElectronService) {\n   // now we have access to electron api through this service\n   }\n}\n```\n\nLet’s see if we really have access to Electron API.\n\nReplace the content of your `app.component.ts` file with the following.\n\n```ts\nimport { Component } from '@angular/core';\nimport { ElectronService } from 'ngx-electron';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'angular-electron';\n\n  versions = { node: '', chrome: '', electron: '' };\n\n  constructor(private _electronService: ElectronService) {\n    // Make sure that app is being executed inside of electron.\n    if (this._electronService.isElectronApp) {\n      // We have access to node process.\n      this.versions.node = this._electronService.process.versions.node;\n      this.versions.chrome = this._electronService.process.versions.chrome;\n      this.versions.electron = this._electronService.process.versions.electron;\n    }\n  }\n}\n```\n\nAnd replace the content of the `app.component.html` file with the following\n\n```html\n<!--The content below is only a placeholder and can be replaced.-->\n\n<div style=\"text-align:center\">\n\n  <h1>Welcome to {{ title }}!</h1>\n\n  <ul>\n    <li>Node version {{ versions.node }}</li>\n    <li>Chrome version {{ versions.chrome }}</li>\n    <li>Electron version {{ versions.electron }}</li>\n  </ul>\n\n</div>\n```\n\nSo, what do you think? don’t think a lot let’s see it in action \uD83D\uDE05.\n\n```bash\n$ npm run electron\n```\n\nFor now, you should see the application up and running with the versions of code, chrome, and electron we using, hmmm we did it \uD83D\uDE09.\n\n# Conclusion\n\nBuilding desktop apps isn’t that hard, and we can use some powerful tools like node, angular, electron, and typescript to do awesome work, and you know what? even if you're a web developer it’s not bad to try some new techs in your free time, I'm pretty sure that you going to learn something new from trying new techs \uD83D\uDE09.\n\nI may add a new post to write some unit tests for our application if I have free time.\n\nAnd if you are stuck you can always refer to the [Github repo](https://github.com/AhmedMKamal/angular-electron) of this application.",
    "contentPreview": "It's true if you know how to write Javascript code, you can build a desktop application that looks and behaves like the native one. not just that, you also can bring the power of Angular into the world of desktop apps to make your IU look stunning...",
    "coverUrl": "https://res.cloudinary.com/practicaldev/image/fetch/s--6N2EVK1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/8nrdksll7i842jrkfckz.png",
    "publishDate": "2019-02-02T00:00:00Z",
    "publisher": {
      "id": "-_2qcZJnWizzHYLeSf3YS"
    },
    "tags": [
      {
        "id": "Ct5rtwI6ORkszySsRvzCQ"
      },
      {
        "id": "KBLMbcO3IJJcaIP9dqT0a"
      },
      {
        "id": "alXg0TqnpWeJhctAkQDCi"
      },
      {
        "id": "bpt4Da-QM5GOjNHbsIJBa"
      }
    ]
  }
]